create database courtstar

use courtstar

create table account
(
  id int identity(1, 1) primary key,
  email varchar(80),
  password text,
  first_name nvarchar(30),
  last_name nvarchar(50),
  phone char(10),
  is_delete bit not null,
  otp char(6),
  otp_generated_time datetime,
);

create table invalidated_token
(
    id varchar(255) primary key,
    expiry_time datetime
);

create table permission
(
    name varchar(255) primary key,
    description varchar(255)
);

create table role
(
    name varchar(255) primary key,
    description varchar(255)
);

create table account_roles
(
    account_id int not null foreign key references account(id),
    roles_name varchar(255) not null foreign key references role(name),
    primary key (account_id, roles_name),
);

create table role_permissions
(
    role_name varchar(255) not null foreign key references role(name),
    permissions_name varchar(255) not null foreign key references permission(name),
    primary key (role_name, permissions_name),
);

create table customer
(
  id int identity(1, 1) primary key,
  account_id int unique foreign key references account(id)
);

create table centre_manager
(
  id int identity(1,1) primary key,
  address nvarchar(100),
  current_balance money,
  account_id int unique foreign key references account(id)
);

create table centre
(
  id int identity(1, 1) primary key,
  name nvarchar(50),
  address nvarchar(100),
  open_time time,
  close_time time,
  price_per_hour money,
  slot_duration int,
  number_of_court int,
  payment_method text,
  status bit,
  approve_date date,
  manager_id int foreign key references centre_manager(id),
);

create table centre_staff
(
  id int identity (1,1) primary key,
  centre_id int foreign key references centre(id),
  account_id int unique foreign key references account(id)
);

create table court
(
  id int identity(1,1) primary key,
  court_no int,
  status bit,
  centre_id int foreign key references centre(id),
);

create table slot
(
  id int identity(1,1) primary key,
  slot_no int,
  start_time time,
  end_time time,
  centre_id int foreign key references centre(id),
);

create table slot_unavailable
(
  id int identity(1,1) primary key,
  date date,
  slot_id int foreign key references slot(id),
  court_id int foreign key references court(id),
);

create table booking_schedule
(
  id int identity(1,1) primary key,
  date date,
  total_price money,
  status bit,
  customer_id int foreign key references customer(id),
  slot_id int foreign key references slot(id),
  court_id int foreign key references court(id),
);

create table feedback
(
  id int identity(1,1) primary key,
  content text,
  create_date date,
  customer_id int foreign key references customer(id),
  centre_id int foreign key references centre(id)
);

create table image
(
  id int identity(1,1) primary key,
  image_no int,
  url text,
  centre_id int foreign key references centre(id)
);

create table payment
(
  id int identity(1,1) primary key,
  date date,
  status bit,
  payment_method text,
  bs_id int unique foreign key references booking_schedule(id)
);






-- Create permissions
-- INSERT INTO permission (name, description) VALUES ('READ_PRIVILEGE', 'Allows reading');
-- INSERT INTO permission (name, description) VALUES ('WRITE_PRIVILEGE', 'Allows writing');

-- Create roles and associate permissions
INSERT INTO role (name, description) VALUES ('ADMIN', 'Administrator role');
INSERT INTO role (name, description) VALUES ('MANAGER', 'Manager role');
INSERT INTO role (name, description) VALUES ('STAFF', 'Staff role');
INSERT INTO role (name, description) VALUES ('CUSTOMER', 'Customer role');

-- Assuming you have a join table for role and permission
-- INSERT INTO role_permissions (role_id, permission_id) VALUES ('ADMIN', 'READ_PRIVILEGE');
-- INSERT INTO role_permissions (role_id, permission_id) VALUES ('ADMIN', 'WRITE_PRIVILEGE');
-- INSERT INTO role_permissions (role_id, permission_id) VALUES ('MANAGER', 'READ_PRIVILEGE');
-- INSERT INTO role_permissions (role_id, permission_id) VALUES ('STAFF', 'READ_PRIVILEGE');
-- INSERT INTO role_permissions (role_id, permission_id) VALUES ('CUSTOMER', 'READ_PRIVILEGE');

-- Create accounts and associate roles
INSERT INTO account (email, password, phone, first_name, last_name, is_delete, otp, otp_generated_time) VALUES ('thanh@gmail.com', '$2a$10$wVJxdHDOO/dY.WgpWNa7c.fIS8fJ5kle.09DfHUTy5q4bWX0z.vsK', '1234567890', 'Thanh', 'Nguyen', 0, NULL, NULL);
INSERT INTO account (email, password, phone, first_name, last_name, is_delete, otp, otp_generated_time) VALUES ('manager@gmail.com', '$2a$10$wVJxdHDOO/dY.WgpWNa7c.fIS8fJ5kle.09DfHUTy5q4bWX0z.vsK', '1234567891', 'Manager', 'User', 0, NULL, NULL);
INSERT INTO account (email, password, phone, first_name, last_name, is_delete, otp, otp_generated_time) VALUES ('customer@gmail.com', '$2a$10$wVJxdHDOO/dY.WgpWNa7c.fIS8fJ5kle.09DfHUTy5q4bWX0z.vsK', '1234567892', 'Customer', 'User', 0, NULL, NULL);

-- Assuming you have a join table for account and role
INSERT INTO account_roles (account_id, roles_name) VALUES ((SELECT id FROM account WHERE email = 'thanh@gmail.com'), 'ADMIN');
INSERT INTO account_roles (account_id, roles_name) VALUES ((SELECT id FROM account WHERE email = 'thanh@gmail.com'), 'MANAGER');
INSERT INTO account_roles (account_id, roles_name) VALUES ((SELECT id FROM account WHERE email = 'thanh@gmail.com'), 'STAFF');
INSERT INTO account_roles (account_id, roles_name) VALUES ((SELECT id FROM account WHERE email = 'thanh@gmail.com'), 'CUSTOMER');
INSERT INTO account_roles (account_id, roles_name) VALUES ((SELECT id FROM account WHERE email = 'manager@gmail.com'), 'MANAGER');
INSERT INTO account_roles (account_id, roles_name) VALUES ((SELECT id FROM account WHERE email = 'manager@gmail.com'), 'STAFF');
INSERT INTO account_roles (account_id, roles_name) VALUES ((SELECT id FROM account WHERE email = 'manager@gmail.com'), 'CUSTOMER');
INSERT INTO account_roles (account_id, roles_name) VALUES ((SELECT id FROM account WHERE email = 'customer@gmail.com'), 'CUSTOMER');
